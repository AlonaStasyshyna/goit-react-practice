{"ast":null,"code":"var _jsxFileName = \"/Users/astasyshyna/Documents/GitHub/goit-react-practice/src/components/App.jsx\";\nimport { Component } from \"react\";\nimport { nanoid } from 'nanoid'; // import { User } from \"./User/User\";\n\nimport { UsersList } from \"./UsersList/UsersList\"; // import { Section } from \"./Section/Section\";\n\nimport { users } from \"data/users\";\nimport { Button } from \"./Button/Button\";\nimport { AddUserForm } from \"./AddUserForm/AddUserForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      users,\n      isListShown: false,\n      userToUpdate: {}\n    };\n\n    this.onClickHandler = () => this.setState({\n      isListShown: true\n    });\n\n    this.userDelete = userId => {\n      this.setState(prevState => ({\n        users: prevState.users.filter(user => user.id !== userId)\n      }));\n    };\n\n    this.changeJobStatus = userId => {\n      this.setState(prevState => ({\n        users: prevState.users.map(user => {\n          if (user.id === userId) {\n            return { ...user,\n              hasJob: !user.hasJob\n            };\n          }\n\n          return user;\n        })\n      }));\n    };\n\n    this.addUser = data => {\n      const newUser = { ...data,\n        id: nanoid(),\n        hasJob: false\n      };\n      this.setState(prevState => ({\n        users: [...prevState.users, newUser]\n      }));\n    };\n\n    this.showUpdateForm = id => {\n      const userToUpdate = this.state.users.find(user => user.id === id);\n      this.setState({\n        userToUpdate\n      });\n    };\n\n    this.updateUser = user => {\n      const userIndex = this.state.users.findIndex(u => u.id === user.id);\n      const newUsers = [...this.state.users];\n      newUsers.splice(userIndex, 1, user);\n    };\n  }\n\n  render() {\n    const {\n      users,\n      isListShown,\n      userToUpdate\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isListShown ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(AddUserForm, {\n          addUser: this.addUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(UsersList, {\n          users: users,\n          userDelete: this.userDelete,\n          changeJobStatus: this.changeJobStatus,\n          showUpdateForm: this.showUpdateForm,\n          userToUpdate: userToUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n        type: \"button\",\n        text: \"Show users list\",\n        clickHandler: this.onClickHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n\n}\n; // export const App = () => {\n//   return (\n//     <>\n//       <Section>\n//         <User user={users[0]} />\n//       </Section>\n//       <Section title=\"List of users\">\n//         <UsersList users={users} />\n//       </Section>\n//     </>\n//   );\n// };","map":{"version":3,"sources":["/Users/astasyshyna/Documents/GitHub/goit-react-practice/src/components/App.jsx"],"names":["Component","nanoid","UsersList","users","Button","AddUserForm","App","state","isListShown","userToUpdate","onClickHandler","setState","userDelete","userId","prevState","filter","user","id","changeJobStatus","map","hasJob","addUser","data","newUser","showUpdateForm","find","updateUser","userIndex","findIndex","u","newUsers","splice","render"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\nimport { nanoid } from 'nanoid'\n// import { User } from \"./User/User\";\nimport { UsersList } from \"./UsersList/UsersList\";\n// import { Section } from \"./Section/Section\";\nimport { users } from \"data/users\";\nimport { Button } from \"./Button/Button\";\nimport { AddUserForm } from \"./AddUserForm/AddUserForm\";\n\nexport class App extends Component {\n  state = {\n    users,\n    isListShown: false,\n    userToUpdate: {},\n  }\n\n  onClickHandler = () => \n    this.setState({\n      isListShown: true,\n    })\n  \n  userDelete = (userId) => {\n    this.setState(prevState => \n      ({users: prevState.users.filter(user => user.id !== userId)}),\n    )\n  }\n\n  changeJobStatus = (userId) => {\n    this.setState(prevState => ({\n      users: prevState.users.map(user => {\n        if (user.id === userId) {\n          return { ...user, hasJob: !user.hasJob };\n        }\n\n        return user;\n      })\n    }))\n  }\n\n  addUser = (data) => {\n    const newUser = {\n      ...data,\n      id: nanoid(),\n      hasJob: false,\n    }\n    \n    this.setState((prevState) => ({\n      users: [...prevState.users, newUser]\n    }))\n  }\n  \n  showUpdateForm = (id) => {\n    const userToUpdate = this.state.users.find(user => user.id === id);\n\n    this.setState({\n      userToUpdate,\n    })\n  }\n\n  updateUser = (user) => {\n    const userIndex = this.state.users.findIndex((u) => u.id === user.id);\n    const newUsers = [...this.state.users];\n    newUsers.splice(userIndex, 1, user)\n  }\n\n  render() {\n    const { users, isListShown, userToUpdate } = this.state;\n\n    return (\n      <>\n        {isListShown\n          ? <>\n              <AddUserForm addUser={this.addUser} />\n              <UsersList\n                users={users}\n                userDelete={this.userDelete}\n                changeJobStatus={this.changeJobStatus}\n                showUpdateForm={this.showUpdateForm}\n                userToUpdate={userToUpdate}\n              />\n            </>\n          : <Button\n              type=\"button\"\n              text=\"Show users list\"\n              clickHandler={this.onClickHandler}\n            />\n        }\n      </>\n    )\n  }\n};\n\n// export const App = () => {\n//   return (\n//     <>\n//       <Section>\n//         <User user={users[0]} />\n//       </Section>\n      \n//       <Section title=\"List of users\">\n//         <UsersList users={users} />\n//       </Section>\n//     </>\n//   );\n// };\n"]},"metadata":{},"sourceType":"module"}