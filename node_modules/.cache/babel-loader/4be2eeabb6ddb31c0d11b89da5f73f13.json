{"ast":null,"code":"var _jsxFileName = \"/Users/astasyshyna/Documents/GitHub/goit-react-practice/src/components/UsersList/UsersList.jsx\";\nimport PropTypes from 'prop-types';\nimport { User } from \"components/User/User\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UsersList = _ref => {\n  let {\n    users\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(User, {\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 21\n      }, this)\n    }, user.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n_c = UsersList;\nUsersList.propTypes = {\n  users: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired\n  })).isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersList\");","map":{"version":3,"sources":["/Users/astasyshyna/Documents/GitHub/goit-react-practice/src/components/UsersList/UsersList.jsx"],"names":["PropTypes","User","UsersList","users","map","user","id","propTypes","arrayOf","shape","string","isRequired"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,sBAArB;;AAEA,OAAO,MAAMC,SAAS,GAAG,QAAe;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACpC,sBACI;AAAA,cACKA,KAAK,CAACC,GAAN,CAAWC,IAAD,iBACP;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEA;AAAZ;AAAA;AAAA;AAAA;AAAA;AADJ,OAASA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAVM;KAAMJ,S;AAYbA,SAAS,CAACK,SAAV,GAAsB;AAClBJ,EAAAA,KAAK,EAAEH,SAAS,CAACQ,OAAV,CAAkBR,SAAS,CAACS,KAAV,CAAgB;AACrCH,IAAAA,EAAE,EAAEN,SAAS,CAACU,MAAV,CAAiBC;AADgB,GAAhB,CAAlB,EAEHA;AAHc,CAAtB","sourcesContent":["import PropTypes from 'prop-types';\nimport { User } from \"components/User/User\"\n\nexport const UsersList = ({ users }) => {\n    return (\n        <ul>\n            {users.map((user) => (\n                <li key={user.id}>\n                    <User user={user}/>\n                </li>\n            ))}\n        </ul>\n    )\n}\n\nUsersList.propTypes = {\n    users: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n    })).isRequired,\n}"]},"metadata":{},"sourceType":"module"}