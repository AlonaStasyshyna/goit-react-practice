{"ast":null,"code":"var _jsxFileName = \"/Users/astasyshyna/Documents/GitHub/goit-react-practice/src/components/UsersList/UsersList.jsx\";\nimport PropTypes from 'prop-types';\nimport { User } from \"components/User/User\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UsersList = _ref => {\n  let {\n    users,\n    userDelete,\n    changeJobStatus,\n    showUpdateForm,\n    userToUpdate,\n    updateUser\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(User, {\n        user: user,\n        userDelete: userDelete,\n        changeJobStatus: changeJobStatus,\n        showUpdateForm: showUpdateForm,\n        userToUpdate: userToUpdate,\n        updateUser: updateUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 21\n      }, this)\n    }, user.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n_c = UsersList;\nUsersList.propTypes = {\n  users: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired\n  })).isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersList\");","map":{"version":3,"sources":["/Users/astasyshyna/Documents/GitHub/goit-react-practice/src/components/UsersList/UsersList.jsx"],"names":["PropTypes","User","UsersList","users","userDelete","changeJobStatus","showUpdateForm","userToUpdate","updateUser","map","user","id","propTypes","arrayOf","shape","string","isRequired"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,sBAArB;;AAGA,OAAO,MAAMC,SAAS,GAAG,QAMJ;AAAA,MANK;AACtBC,IAAAA,KADsB;AAEtBC,IAAAA,UAFsB;AAGtBC,IAAAA,eAHsB;AAItBC,IAAAA,cAJsB;AAKtBC,IAAAA,YALsB;AAMtBC,IAAAA;AANsB,GAML;AACjB,sBACI;AAAA,cACKL,KAAK,CAACM,GAAN,CAAWC,IAAD,iBACP;AAAA,6BACI,QAAC,IAAD;AACI,QAAA,IAAI,EAAEA,IADV;AAEI,QAAA,UAAU,EAAEN,UAFhB;AAGI,QAAA,eAAe,EAAEC,eAHrB;AAII,QAAA,cAAc,EAAEC,cAJpB;AAKI,QAAA,YAAY,EAAEC,YALlB;AAMI,QAAA,UAAU,EAAEC;AANhB;AAAA;AAAA;AAAA;AAAA;AADJ,OAASE,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAvBM;KAAMT,S;AAyBbA,SAAS,CAACU,SAAV,GAAsB;AAClBT,EAAAA,KAAK,EAAEH,SAAS,CAACa,OAAV,CAAkBb,SAAS,CAACc,KAAV,CAAgB;AACrCH,IAAAA,EAAE,EAAEX,SAAS,CAACe,MAAV,CAAiBC;AADgB,GAAhB,CAAlB,EAEHA;AAHc,CAAtB","sourcesContent":["import PropTypes from 'prop-types';\nimport { User } from \"components/User/User\"\n\n\nexport const UsersList = ({\n    users,\n    userDelete,\n    changeJobStatus,\n    showUpdateForm,\n    userToUpdate,\n    updateUser,}) => {\n    return (\n        <ul>\n            {users.map((user) => (\n                <li key={user.id}>\n                    <User\n                        user={user}\n                        userDelete={userDelete}\n                        changeJobStatus={changeJobStatus}\n                        showUpdateForm={showUpdateForm}\n                        userToUpdate={userToUpdate}\n                        updateUser={updateUser}\n                    />\n                </li>\n            ))}\n        </ul>\n    )\n}\n\nUsersList.propTypes = {\n    users: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n    })).isRequired,\n}"]},"metadata":{},"sourceType":"module"}